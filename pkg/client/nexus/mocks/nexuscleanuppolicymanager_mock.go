// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	nexus "github.com/epam/edp-nexus-operator/pkg/client/nexus"
	mock "github.com/stretchr/testify/mock"
)

// MockNexusCleanupPolicyManager is an autogenerated mock type for the NexusCleanupPolicyManager type
type MockNexusCleanupPolicyManager struct {
	mock.Mock
}

type MockNexusCleanupPolicyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNexusCleanupPolicyManager) EXPECT() *MockNexusCleanupPolicyManager_Expecter {
	return &MockNexusCleanupPolicyManager_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, policy
func (_m *MockNexusCleanupPolicyManager) Create(ctx context.Context, policy *nexus.NexusCleanupPolicy) error {
	ret := _m.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *nexus.NexusCleanupPolicy) error); ok {
		r0 = rf(ctx, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNexusCleanupPolicyManager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNexusCleanupPolicyManager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - policy *nexus.NexusCleanupPolicy
func (_e *MockNexusCleanupPolicyManager_Expecter) Create(ctx interface{}, policy interface{}) *MockNexusCleanupPolicyManager_Create_Call {
	return &MockNexusCleanupPolicyManager_Create_Call{Call: _e.mock.On("Create", ctx, policy)}
}

func (_c *MockNexusCleanupPolicyManager_Create_Call) Run(run func(ctx context.Context, policy *nexus.NexusCleanupPolicy)) *MockNexusCleanupPolicyManager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*nexus.NexusCleanupPolicy))
	})
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Create_Call) Return(_a0 error) *MockNexusCleanupPolicyManager_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Create_Call) RunAndReturn(run func(context.Context, *nexus.NexusCleanupPolicy) error) *MockNexusCleanupPolicyManager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name
func (_m *MockNexusCleanupPolicyManager) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNexusCleanupPolicyManager_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNexusCleanupPolicyManager_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockNexusCleanupPolicyManager_Expecter) Delete(ctx interface{}, name interface{}) *MockNexusCleanupPolicyManager_Delete_Call {
	return &MockNexusCleanupPolicyManager_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *MockNexusCleanupPolicyManager_Delete_Call) Run(run func(ctx context.Context, name string)) *MockNexusCleanupPolicyManager_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Delete_Call) Return(_a0 error) *MockNexusCleanupPolicyManager_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockNexusCleanupPolicyManager_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockNexusCleanupPolicyManager) Get(ctx context.Context, name string) (*nexus.NexusCleanupPolicy, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *nexus.NexusCleanupPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*nexus.NexusCleanupPolicy, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *nexus.NexusCleanupPolicy); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nexus.NexusCleanupPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNexusCleanupPolicyManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNexusCleanupPolicyManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockNexusCleanupPolicyManager_Expecter) Get(ctx interface{}, name interface{}) *MockNexusCleanupPolicyManager_Get_Call {
	return &MockNexusCleanupPolicyManager_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *MockNexusCleanupPolicyManager_Get_Call) Run(run func(ctx context.Context, name string)) *MockNexusCleanupPolicyManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Get_Call) Return(_a0 *nexus.NexusCleanupPolicy, _a1 error) *MockNexusCleanupPolicyManager_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Get_Call) RunAndReturn(run func(context.Context, string) (*nexus.NexusCleanupPolicy, error)) *MockNexusCleanupPolicyManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, name, policy
func (_m *MockNexusCleanupPolicyManager) Update(ctx context.Context, name string, policy *nexus.NexusCleanupPolicy) error {
	ret := _m.Called(ctx, name, policy)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *nexus.NexusCleanupPolicy) error); ok {
		r0 = rf(ctx, name, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNexusCleanupPolicyManager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNexusCleanupPolicyManager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - policy *nexus.NexusCleanupPolicy
func (_e *MockNexusCleanupPolicyManager_Expecter) Update(ctx interface{}, name interface{}, policy interface{}) *MockNexusCleanupPolicyManager_Update_Call {
	return &MockNexusCleanupPolicyManager_Update_Call{Call: _e.mock.On("Update", ctx, name, policy)}
}

func (_c *MockNexusCleanupPolicyManager_Update_Call) Run(run func(ctx context.Context, name string, policy *nexus.NexusCleanupPolicy)) *MockNexusCleanupPolicyManager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*nexus.NexusCleanupPolicy))
	})
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Update_Call) Return(_a0 error) *MockNexusCleanupPolicyManager_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNexusCleanupPolicyManager_Update_Call) RunAndReturn(run func(context.Context, string, *nexus.NexusCleanupPolicy) error) *MockNexusCleanupPolicyManager_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNexusCleanupPolicyManager creates a new instance of MockNexusCleanupPolicyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNexusCleanupPolicyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNexusCleanupPolicyManager {
	mock := &MockNexusCleanupPolicyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
