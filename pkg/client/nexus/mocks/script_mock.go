// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	schema "github.com/datadrivers/go-nexus-client/nexus3/schema"
)

// MockScript is an autogenerated mock type for the Script type
type MockScript struct {
	mock.Mock
}

type MockScript_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScript) EXPECT() *MockScript_Expecter {
	return &MockScript_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: script
func (_m *MockScript) Create(script *schema.Script) error {
	ret := _m.Called(script)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*schema.Script) error); ok {
		r0 = rf(script)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScript_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockScript_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - script *schema.Script
func (_e *MockScript_Expecter) Create(script interface{}) *MockScript_Create_Call {
	return &MockScript_Create_Call{Call: _e.mock.On("Create", script)}
}

func (_c *MockScript_Create_Call) Run(run func(script *schema.Script)) *MockScript_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*schema.Script))
	})
	return _c
}

func (_c *MockScript_Create_Call) Return(_a0 error) *MockScript_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScript_Create_Call) RunAndReturn(run func(*schema.Script) error) *MockScript_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: name
func (_m *MockScript) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScript_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockScript_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *MockScript_Expecter) Delete(name interface{}) *MockScript_Delete_Call {
	return &MockScript_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *MockScript_Delete_Call) Run(run func(name string)) *MockScript_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockScript_Delete_Call) Return(_a0 error) *MockScript_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScript_Delete_Call) RunAndReturn(run func(string) error) *MockScript_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *MockScript) Get(name string) (*schema.Script, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *schema.Script
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*schema.Script, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *schema.Script); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Script)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScript_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockScript_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *MockScript_Expecter) Get(name interface{}) *MockScript_Get_Call {
	return &MockScript_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockScript_Get_Call) Run(run func(name string)) *MockScript_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockScript_Get_Call) Return(_a0 *schema.Script, _a1 error) *MockScript_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScript_Get_Call) RunAndReturn(run func(string) (*schema.Script, error)) *MockScript_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RunWithPayload provides a mock function with given fields: name, payload
func (_m *MockScript) RunWithPayload(name string, payload string) error {
	ret := _m.Called(name, payload)

	if len(ret) == 0 {
		panic("no return value specified for RunWithPayload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScript_RunWithPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWithPayload'
type MockScript_RunWithPayload_Call struct {
	*mock.Call
}

// RunWithPayload is a helper method to define mock.On call
//   - name string
//   - payload string
func (_e *MockScript_Expecter) RunWithPayload(name interface{}, payload interface{}) *MockScript_RunWithPayload_Call {
	return &MockScript_RunWithPayload_Call{Call: _e.mock.On("RunWithPayload", name, payload)}
}

func (_c *MockScript_RunWithPayload_Call) Run(run func(name string, payload string)) *MockScript_RunWithPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockScript_RunWithPayload_Call) Return(_a0 error) *MockScript_RunWithPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScript_RunWithPayload_Call) RunAndReturn(run func(string, string) error) *MockScript_RunWithPayload_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: script
func (_m *MockScript) Update(script *schema.Script) error {
	ret := _m.Called(script)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*schema.Script) error); ok {
		r0 = rf(script)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScript_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockScript_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - script *schema.Script
func (_e *MockScript_Expecter) Update(script interface{}) *MockScript_Update_Call {
	return &MockScript_Update_Call{Call: _e.mock.On("Update", script)}
}

func (_c *MockScript_Update_Call) Run(run func(script *schema.Script)) *MockScript_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*schema.Script))
	})
	return _c
}

func (_c *MockScript_Update_Call) Return(_a0 error) *MockScript_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScript_Update_Call) RunAndReturn(run func(*schema.Script) error) *MockScript_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScript creates a new instance of MockScript. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScript(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScript {
	mock := &MockScript{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
