// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	blobstore "github.com/datadrivers/go-nexus-client/nexus3/schema/blobstore"
	mock "github.com/stretchr/testify/mock"
)

// MockFileBlobStore is an autogenerated mock type for the FileBlobStore type
type MockFileBlobStore struct {
	mock.Mock
}

type MockFileBlobStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileBlobStore) EXPECT() *MockFileBlobStore_Expecter {
	return &MockFileBlobStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: bs
func (_m *MockFileBlobStore) Create(bs *blobstore.File) error {
	ret := _m.Called(bs)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*blobstore.File) error); ok {
		r0 = rf(bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileBlobStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFileBlobStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - bs *blobstore.File
func (_e *MockFileBlobStore_Expecter) Create(bs interface{}) *MockFileBlobStore_Create_Call {
	return &MockFileBlobStore_Create_Call{Call: _e.mock.On("Create", bs)}
}

func (_c *MockFileBlobStore_Create_Call) Run(run func(bs *blobstore.File)) *MockFileBlobStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*blobstore.File))
	})
	return _c
}

func (_c *MockFileBlobStore_Create_Call) Return(_a0 error) *MockFileBlobStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileBlobStore_Create_Call) RunAndReturn(run func(*blobstore.File) error) *MockFileBlobStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: name
func (_m *MockFileBlobStore) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileBlobStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFileBlobStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *MockFileBlobStore_Expecter) Delete(name interface{}) *MockFileBlobStore_Delete_Call {
	return &MockFileBlobStore_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *MockFileBlobStore_Delete_Call) Run(run func(name string)) *MockFileBlobStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileBlobStore_Delete_Call) Return(_a0 error) *MockFileBlobStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileBlobStore_Delete_Call) RunAndReturn(run func(string) error) *MockFileBlobStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *MockFileBlobStore) Get(name string) (*blobstore.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *blobstore.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*blobstore.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *blobstore.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blobstore.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileBlobStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFileBlobStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *MockFileBlobStore_Expecter) Get(name interface{}) *MockFileBlobStore_Get_Call {
	return &MockFileBlobStore_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockFileBlobStore_Get_Call) Run(run func(name string)) *MockFileBlobStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileBlobStore_Get_Call) Return(_a0 *blobstore.File, _a1 error) *MockFileBlobStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileBlobStore_Get_Call) RunAndReturn(run func(string) (*blobstore.File, error)) *MockFileBlobStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: name, bs
func (_m *MockFileBlobStore) Update(name string, bs *blobstore.File) error {
	ret := _m.Called(name, bs)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *blobstore.File) error); ok {
		r0 = rf(name, bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileBlobStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFileBlobStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - name string
//   - bs *blobstore.File
func (_e *MockFileBlobStore_Expecter) Update(name interface{}, bs interface{}) *MockFileBlobStore_Update_Call {
	return &MockFileBlobStore_Update_Call{Call: _e.mock.On("Update", name, bs)}
}

func (_c *MockFileBlobStore_Update_Call) Run(run func(name string, bs *blobstore.File)) *MockFileBlobStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*blobstore.File))
	})
	return _c
}

func (_c *MockFileBlobStore_Update_Call) Return(_a0 error) *MockFileBlobStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileBlobStore_Update_Call) RunAndReturn(run func(string, *blobstore.File) error) *MockFileBlobStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileBlobStore creates a new instance of MockFileBlobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileBlobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileBlobStore {
	mock := &MockFileBlobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
