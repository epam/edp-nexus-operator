// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	security "github.com/datadrivers/go-nexus-client/nexus3/schema/security"
)

// MockRole is an autogenerated mock type for the Role type
type MockRole struct {
	mock.Mock
}

type MockRole_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRole) EXPECT() *MockRole_Expecter {
	return &MockRole_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: role
func (_m *MockRole) Create(role security.Role) error {
	ret := _m.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(security.Role) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRole_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRole_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - role security.Role
func (_e *MockRole_Expecter) Create(role interface{}) *MockRole_Create_Call {
	return &MockRole_Create_Call{Call: _e.mock.On("Create", role)}
}

func (_c *MockRole_Create_Call) Run(run func(role security.Role)) *MockRole_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(security.Role))
	})
	return _c
}

func (_c *MockRole_Create_Call) Return(_a0 error) *MockRole_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRole_Create_Call) RunAndReturn(run func(security.Role) error) *MockRole_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockRole) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRole_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRole_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockRole_Expecter) Delete(id interface{}) *MockRole_Delete_Call {
	return &MockRole_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockRole_Delete_Call) Run(run func(id string)) *MockRole_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRole_Delete_Call) Return(_a0 error) *MockRole_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRole_Delete_Call) RunAndReturn(run func(string) error) *MockRole_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockRole) Get(id string) (*security.Role, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *security.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*security.Role, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *security.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRole_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRole_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockRole_Expecter) Get(id interface{}) *MockRole_Get_Call {
	return &MockRole_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockRole_Get_Call) Run(run func(id string)) *MockRole_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRole_Get_Call) Return(_a0 *security.Role, _a1 error) *MockRole_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRole_Get_Call) RunAndReturn(run func(string) (*security.Role, error)) *MockRole_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, role
func (_m *MockRole) Update(id string, role security.Role) error {
	ret := _m.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, security.Role) error); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRole_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRole_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - role security.Role
func (_e *MockRole_Expecter) Update(id interface{}, role interface{}) *MockRole_Update_Call {
	return &MockRole_Update_Call{Call: _e.mock.On("Update", id, role)}
}

func (_c *MockRole_Update_Call) Run(run func(id string, role security.Role)) *MockRole_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(security.Role))
	})
	return _c
}

func (_c *MockRole_Update_Call) Return(_a0 error) *MockRole_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRole_Update_Call) RunAndReturn(run func(string, security.Role) error) *MockRole_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRole creates a new instance of MockRole. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRole(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRole {
	mock := &MockRole{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
