// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	security "github.com/datadrivers/go-nexus-client/nexus3/schema/security"
)

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *MockUser) Create(user security.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(security.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUser_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user security.User
func (_e *MockUser_Expecter) Create(user interface{}) *MockUser_Create_Call {
	return &MockUser_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *MockUser_Create_Call) Run(run func(user security.User)) *MockUser_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(security.User))
	})
	return _c
}

func (_c *MockUser_Create_Call) Return(_a0 error) *MockUser_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Create_Call) RunAndReturn(run func(security.User) error) *MockUser_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockUser) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUser_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockUser_Expecter) Delete(id interface{}) *MockUser_Delete_Call {
	return &MockUser_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockUser_Delete_Call) Run(run func(id string)) *MockUser_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUser_Delete_Call) Return(_a0 error) *MockUser_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Delete_Call) RunAndReturn(run func(string) error) *MockUser_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockUser) Get(id string) (*security.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *security.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*security.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *security.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUser_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockUser_Expecter) Get(id interface{}) *MockUser_Get_Call {
	return &MockUser_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockUser_Get_Call) Run(run func(id string)) *MockUser_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUser_Get_Call) Return(_a0 *security.User, _a1 error) *MockUser_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_Get_Call) RunAndReturn(run func(string) (*security.User, error)) *MockUser_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, user
func (_m *MockUser) Update(id string, user security.User) error {
	ret := _m.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, security.User) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUser_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - user security.User
func (_e *MockUser_Expecter) Update(id interface{}, user interface{}) *MockUser_Update_Call {
	return &MockUser_Update_Call{Call: _e.mock.On("Update", id, user)}
}

func (_c *MockUser_Update_Call) Run(run func(id string, user security.User)) *MockUser_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(security.User))
	})
	return _c
}

func (_c *MockUser_Update_Call) Return(_a0 error) *MockUser_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Update_Call) RunAndReturn(run func(string, security.User) error) *MockUser_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
