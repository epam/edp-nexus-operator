// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	blobstore "github.com/datadrivers/go-nexus-client/nexus3/schema/blobstore"
	mock "github.com/stretchr/testify/mock"
)

// MockS3BlobStore is an autogenerated mock type for the S3BlobStore type
type MockS3BlobStore struct {
	mock.Mock
}

type MockS3BlobStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockS3BlobStore) EXPECT() *MockS3BlobStore_Expecter {
	return &MockS3BlobStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: bs
func (_m *MockS3BlobStore) Create(bs *blobstore.S3) error {
	ret := _m.Called(bs)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*blobstore.S3) error); ok {
		r0 = rf(bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockS3BlobStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockS3BlobStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - bs *blobstore.S3
func (_e *MockS3BlobStore_Expecter) Create(bs interface{}) *MockS3BlobStore_Create_Call {
	return &MockS3BlobStore_Create_Call{Call: _e.mock.On("Create", bs)}
}

func (_c *MockS3BlobStore_Create_Call) Run(run func(bs *blobstore.S3)) *MockS3BlobStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*blobstore.S3))
	})
	return _c
}

func (_c *MockS3BlobStore_Create_Call) Return(_a0 error) *MockS3BlobStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockS3BlobStore_Create_Call) RunAndReturn(run func(*blobstore.S3) error) *MockS3BlobStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: name
func (_m *MockS3BlobStore) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockS3BlobStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockS3BlobStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *MockS3BlobStore_Expecter) Delete(name interface{}) *MockS3BlobStore_Delete_Call {
	return &MockS3BlobStore_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *MockS3BlobStore_Delete_Call) Run(run func(name string)) *MockS3BlobStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockS3BlobStore_Delete_Call) Return(_a0 error) *MockS3BlobStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockS3BlobStore_Delete_Call) RunAndReturn(run func(string) error) *MockS3BlobStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *MockS3BlobStore) Get(name string) (*blobstore.S3, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *blobstore.S3
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*blobstore.S3, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *blobstore.S3); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blobstore.S3)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockS3BlobStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockS3BlobStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *MockS3BlobStore_Expecter) Get(name interface{}) *MockS3BlobStore_Get_Call {
	return &MockS3BlobStore_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockS3BlobStore_Get_Call) Run(run func(name string)) *MockS3BlobStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockS3BlobStore_Get_Call) Return(_a0 *blobstore.S3, _a1 error) *MockS3BlobStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockS3BlobStore_Get_Call) RunAndReturn(run func(string) (*blobstore.S3, error)) *MockS3BlobStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: name, bs
func (_m *MockS3BlobStore) Update(name string, bs *blobstore.S3) error {
	ret := _m.Called(name, bs)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *blobstore.S3) error); ok {
		r0 = rf(name, bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockS3BlobStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockS3BlobStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - name string
//   - bs *blobstore.S3
func (_e *MockS3BlobStore_Expecter) Update(name interface{}, bs interface{}) *MockS3BlobStore_Update_Call {
	return &MockS3BlobStore_Update_Call{Call: _e.mock.On("Update", name, bs)}
}

func (_c *MockS3BlobStore_Update_Call) Run(run func(name string, bs *blobstore.S3)) *MockS3BlobStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*blobstore.S3))
	})
	return _c
}

func (_c *MockS3BlobStore_Update_Call) Return(_a0 error) *MockS3BlobStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockS3BlobStore_Update_Call) RunAndReturn(run func(string, *blobstore.S3) error) *MockS3BlobStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockS3BlobStore creates a new instance of MockS3BlobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockS3BlobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockS3BlobStore {
	mock := &MockS3BlobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
